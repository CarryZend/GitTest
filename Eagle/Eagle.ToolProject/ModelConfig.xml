<?xml version="1.0" encoding="utf-8" ?>
<DalClass>
  
  <EntityHead>
    /// &lt;summary&gt;
    /// 说  明：本代码由工具软件生成，数据库设计发生变化后，应重新自动生成。
    /// 日  期：Date Time
    /// 作  者：陈卓
    /// 邮  箱：838010363@qq.com
    /// &lt;/summary&gt;
    using Eagle.DBUtility;
    using Eagle.Interface;
    using System.Collections.Generic;
    using System.Reflection;
  </EntityHead>
  
  <EntityBegin>
    namespace Eagle.Entity
    {
      /// &lt;summary&gt;
      /// 数据库表ClassName所对应的实体类
      /// &lt;/summary&gt;
    public partial class ClassNameEntity:IEntity
    {
  </EntityBegin>
  
  <EntityConstructor>
          /// &lt;summary&gt;
          /// 构造函数
          /// &lt;/summary&gt;
          public ClassNameEntity()
          {

          }
  </EntityConstructor>
  
  <EntityMember>
          #region 成员变量:_FieldName
          private FieldType _FieldName;
          private bool _FieldNameChanged = false;
          CompareParam _FieldNameCompareParam = CompareParam.Equal;
          public string _FieldNameDbType = DbTypeValue;
          #endregion
  </EntityMember>
  
  <EntityProperty>
        /// &lt;summary&gt;
        /// 说明: Descriptions
        /// &lt;/summary&gt;
        public FieldType FieldName
        {
          get { return _FieldName; }
          set {
                _FieldName = value;
                FieldNameChanged=true;
              }
        }

        /// &lt;summary&gt;
        /// 属性: _FieldNameChanged
        /// &lt;/summary&gt;
        public bool FieldNameChanged
        {
          get { return _FieldNameChanged;}
          set {
                _FieldNameChanged=value;
              }
        }

        /// &lt;summary&gt;
        /// 属性: _FieldNameCompareParam
        /// &lt;/summary&gt;
        public CompareParam FieldNameCompareParam
        {
          get { return _FieldNameCompareParam ;}
          set {
                _FieldNameCompareParam = value;
              }
        }

        /// &lt;summary&gt;
        /// 属性: _FieldName的数据库存储类型
        /// &lt;/summary&gt;
        public string FieldNameDbType
        {
          get { 
                return _FieldNameDbType;
              }
        }
  </EntityProperty>
  
  <EntityPrimaryKey>
        /// &lt;summary&gt;
        /// 返回主键字段PropertyInfo集合
        /// &lt;/summary&gt;
        /// <returns>PropertyInfo集合</returns>
        public List&lt;PropertyInfo&gt; GetPrimaryKeys()
        {
              List&lt;PropertyInfo&gt; RetList = new List&lt;PropertyInfo&gt;();
              if(_PrimaryKeys==null||_PrimaryKeys.Length==0)
              {
              return RetList;
              }
              foreach(string key in _PrimaryKeys)
              {
                  RetList.Add(this.GetType().GetProperty(key));
              }
              return RetList;
         }
  </EntityPrimaryKey>

  <EntityEnd>
  }
     }
  </EntityEnd>
  
</DalClass>
